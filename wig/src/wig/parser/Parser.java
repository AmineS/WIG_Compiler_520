/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.parser;

import wig.lexer.*;
import wig.node.*;
import wig.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAservice1Service */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAservice2Service */
		    {
			ArrayList<Object> list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAservice3Service */
		    {
			ArrayList<Object> list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAservice4Service */
		    {
			ArrayList<Object> list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce AAservice5Service */
		    {
			ArrayList<Object> list = new4();
			push(goTo(0), list);
		    }
		    break;
                    case 5: /* reduce AAservice6Service */
		    {
			ArrayList<Object> list = new5();
			push(goTo(0), list);
		    }
		    break;
                    case 6: /* reduce AAservice7Service */
		    {
			ArrayList<Object> list = new6();
			push(goTo(0), list);
		    }
		    break;
                    case 7: /* reduce AAservice8Service */
		    {
			ArrayList<Object> list = new7();
			push(goTo(0), list);
		    }
		    break;
                    case 8: /* reduce AAhtml1Html */
		    {
			ArrayList<Object> list = new8();
			push(goTo(1), list);
		    }
		    break;
                    case 9: /* reduce AAhtml2Html */
		    {
			ArrayList<Object> list = new9();
			push(goTo(1), list);
		    }
		    break;
                    case 10: /* reduce AAtagstarthtmlbody1Htmlbody */
		    {
			ArrayList<Object> list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AAtagstarthtmlbody2Htmlbody */
		    {
			ArrayList<Object> list = new11();
			push(goTo(2), list);
		    }
		    break;
                    case 12: /* reduce ATagEndHtmlbody */
		    {
			ArrayList<Object> list = new12();
			push(goTo(2), list);
		    }
		    break;
                    case 13: /* reduce AHoleHtmlbody */
		    {
			ArrayList<Object> list = new13();
			push(goTo(2), list);
		    }
		    break;
                    case 14: /* reduce AWhateverHtmlbody */
		    {
			ArrayList<Object> list = new14();
			push(goTo(2), list);
		    }
		    break;
                    case 15: /* reduce AMetaHtmlbody */
		    {
			ArrayList<Object> list = new15();
			push(goTo(2), list);
		    }
		    break;
                    case 16: /* reduce AInputHtmlbody */
		    {
			ArrayList<Object> list = new16();
			push(goTo(2), list);
		    }
		    break;
                    case 17: /* reduce AAselecthtmlbody1Htmlbody */
		    {
			ArrayList<Object> list = new17();
			push(goTo(2), list);
		    }
		    break;
                    case 18: /* reduce AAselecthtmlbody2Htmlbody */
		    {
			ArrayList<Object> list = new18();
			push(goTo(2), list);
		    }
		    break;
                    case 19: /* reduce ANameInputattr */
		    {
			ArrayList<Object> list = new19();
			push(goTo(3), list);
		    }
		    break;
                    case 20: /* reduce ATypeInputattr */
		    {
			ArrayList<Object> list = new20();
			push(goTo(3), list);
		    }
		    break;
                    case 21: /* reduce AAttributeInputattr */
		    {
			ArrayList<Object> list = new21();
			push(goTo(3), list);
		    }
		    break;
                    case 22: /* reduce ATexttypeInputtype */
		    {
			ArrayList<Object> list = new22();
			push(goTo(4), list);
		    }
		    break;
                    case 23: /* reduce ARadiotypeInputtype */
		    {
			ArrayList<Object> list = new23();
			push(goTo(4), list);
		    }
		    break;
                    case 24: /* reduce AStrtypeInputtype */
		    {
			ArrayList<Object> list = new24();
			push(goTo(4), list);
		    }
		    break;
                    case 25: /* reduce AAttrAttribute */
		    {
			ArrayList<Object> list = new25();
			push(goTo(5), list);
		    }
		    break;
                    case 26: /* reduce AAssignAttribute */
		    {
			ArrayList<Object> list = new26();
			push(goTo(5), list);
		    }
		    break;
                    case 27: /* reduce AIdAttr */
		    {
			ArrayList<Object> list = new27();
			push(goTo(6), list);
		    }
		    break;
                    case 28: /* reduce AStrAttr */
		    {
			ArrayList<Object> list = new28();
			push(goTo(6), list);
		    }
		    break;
                    case 29: /* reduce AIconstAttr */
		    {
			ArrayList<Object> list = new29();
			push(goTo(6), list);
		    }
		    break;
                    case 30: /* reduce ANegintIntconst */
		    {
			ArrayList<Object> list = new30();
			push(goTo(7), list);
		    }
		    break;
                    case 31: /* reduce APosintIntconst */
		    {
			ArrayList<Object> list = new31();
			push(goTo(7), list);
		    }
		    break;
                    case 32: /* reduce AAschema1Schema */
		    {
			ArrayList<Object> list = new32();
			push(goTo(8), list);
		    }
		    break;
                    case 33: /* reduce AAschema2Schema */
		    {
			ArrayList<Object> list = new33();
			push(goTo(8), list);
		    }
		    break;
                    case 34: /* reduce AField */
		    {
			ArrayList<Object> list = new34();
			push(goTo(9), list);
		    }
		    break;
                    case 35: /* reduce AVariable */
		    {
			ArrayList<Object> list = new35();
			push(goTo(10), list);
		    }
		    break;
                    case 36: /* reduce AOneIdentifiers */
		    {
			ArrayList<Object> list = new36();
			push(goTo(11), list);
		    }
		    break;
                    case 37: /* reduce AManyIdentifiers */
		    {
			ArrayList<Object> list = new37();
			push(goTo(11), list);
		    }
		    break;
                    case 38: /* reduce AIntSimpletype */
		    {
			ArrayList<Object> list = new38();
			push(goTo(12), list);
		    }
		    break;
                    case 39: /* reduce ABoolSimpletype */
		    {
			ArrayList<Object> list = new39();
			push(goTo(12), list);
		    }
		    break;
                    case 40: /* reduce AStringSimpletype */
		    {
			ArrayList<Object> list = new40();
			push(goTo(12), list);
		    }
		    break;
                    case 41: /* reduce AVoidSimpletype */
		    {
			ArrayList<Object> list = new41();
			push(goTo(12), list);
		    }
		    break;
                    case 42: /* reduce ASimpleType */
		    {
			ArrayList<Object> list = new42();
			push(goTo(13), list);
		    }
		    break;
                    case 43: /* reduce ATupleType */
		    {
			ArrayList<Object> list = new43();
			push(goTo(13), list);
		    }
		    break;
                    case 44: /* reduce AAfunction1Function */
		    {
			ArrayList<Object> list = new44();
			push(goTo(14), list);
		    }
		    break;
                    case 45: /* reduce AAfunction2Function */
		    {
			ArrayList<Object> list = new45();
			push(goTo(14), list);
		    }
		    break;
                    case 46: /* reduce AOneArguments */
		    {
			ArrayList<Object> list = new46();
			push(goTo(15), list);
		    }
		    break;
                    case 47: /* reduce AManyArguments */
		    {
			ArrayList<Object> list = new47();
			push(goTo(15), list);
		    }
		    break;
                    case 48: /* reduce AArgument */
		    {
			ArrayList<Object> list = new48();
			push(goTo(16), list);
		    }
		    break;
                    case 49: /* reduce ASession */
		    {
			ArrayList<Object> list = new49();
			push(goTo(17), list);
		    }
		    break;
                    case 50: /* reduce AEmptyStm */
		    {
			ArrayList<Object> list = new50();
			push(goTo(18), list);
		    }
		    break;
                    case 51: /* reduce AAshowstm1Stm */
		    {
			ArrayList<Object> list = new51();
			push(goTo(18), list);
		    }
		    break;
                    case 52: /* reduce AAshowstm2Stm */
		    {
			ArrayList<Object> list = new52();
			push(goTo(18), list);
		    }
		    break;
                    case 53: /* reduce AExitStm */
		    {
			ArrayList<Object> list = new53();
			push(goTo(18), list);
		    }
		    break;
                    case 54: /* reduce AReturnStm */
		    {
			ArrayList<Object> list = new54();
			push(goTo(18), list);
		    }
		    break;
                    case 55: /* reduce AReturnexpStm */
		    {
			ArrayList<Object> list = new55();
			push(goTo(18), list);
		    }
		    break;
                    case 56: /* reduce AIfStm */
		    {
			ArrayList<Object> list = new56();
			push(goTo(18), list);
		    }
		    break;
                    case 57: /* reduce AIfelseStm */
		    {
			ArrayList<Object> list = new57();
			push(goTo(18), list);
		    }
		    break;
                    case 58: /* reduce AWhileStm */
		    {
			ArrayList<Object> list = new58();
			push(goTo(18), list);
		    }
		    break;
                    case 59: /* reduce ACompStm */
		    {
			ArrayList<Object> list = new59();
			push(goTo(18), list);
		    }
		    break;
                    case 60: /* reduce AExpStm */
		    {
			ArrayList<Object> list = new60();
			push(goTo(18), list);
		    }
		    break;
                    case 61: /* reduce AEmptyStmNoShortIf */
		    {
			ArrayList<Object> list = new61();
			push(goTo(19), list);
		    }
		    break;
                    case 62: /* reduce AAshowstmnoshortif1StmNoShortIf */
		    {
			ArrayList<Object> list = new62();
			push(goTo(19), list);
		    }
		    break;
                    case 63: /* reduce AAshowstmnoshortif2StmNoShortIf */
		    {
			ArrayList<Object> list = new63();
			push(goTo(19), list);
		    }
		    break;
                    case 64: /* reduce AExitStmNoShortIf */
		    {
			ArrayList<Object> list = new64();
			push(goTo(19), list);
		    }
		    break;
                    case 65: /* reduce AReturnStmNoShortIf */
		    {
			ArrayList<Object> list = new65();
			push(goTo(19), list);
		    }
		    break;
                    case 66: /* reduce AReturnexpStmNoShortIf */
		    {
			ArrayList<Object> list = new66();
			push(goTo(19), list);
		    }
		    break;
                    case 67: /* reduce AIfelseStmNoShortIf */
		    {
			ArrayList<Object> list = new67();
			push(goTo(19), list);
		    }
		    break;
                    case 68: /* reduce AWhileStmNoShortIf */
		    {
			ArrayList<Object> list = new68();
			push(goTo(19), list);
		    }
		    break;
                    case 69: /* reduce ACompStmNoShortIf */
		    {
			ArrayList<Object> list = new69();
			push(goTo(19), list);
		    }
		    break;
                    case 70: /* reduce AExpStmNoShortIf */
		    {
			ArrayList<Object> list = new70();
			push(goTo(19), list);
		    }
		    break;
                    case 71: /* reduce AIdDocument */
		    {
			ArrayList<Object> list = new71();
			push(goTo(20), list);
		    }
		    break;
                    case 72: /* reduce APlugDocument */
		    {
			ArrayList<Object> list = new72();
			push(goTo(20), list);
		    }
		    break;
                    case 73: /* reduce AReceive */
		    {
			ArrayList<Object> list = new73();
			push(goTo(21), list);
		    }
		    break;
                    case 74: /* reduce AAcompoundstm1Compoundstm */
		    {
			ArrayList<Object> list = new74();
			push(goTo(22), list);
		    }
		    break;
                    case 75: /* reduce AAcompoundstm2Compoundstm */
		    {
			ArrayList<Object> list = new75();
			push(goTo(22), list);
		    }
		    break;
                    case 76: /* reduce AAcompoundstm3Compoundstm */
		    {
			ArrayList<Object> list = new76();
			push(goTo(22), list);
		    }
		    break;
                    case 77: /* reduce AAcompoundstm4Compoundstm */
		    {
			ArrayList<Object> list = new77();
			push(goTo(22), list);
		    }
		    break;
                    case 78: /* reduce AOnePlugs */
		    {
			ArrayList<Object> list = new78();
			push(goTo(23), list);
		    }
		    break;
                    case 79: /* reduce AManyPlugs */
		    {
			ArrayList<Object> list = new79();
			push(goTo(23), list);
		    }
		    break;
                    case 80: /* reduce APlug */
		    {
			ArrayList<Object> list = new80();
			push(goTo(24), list);
		    }
		    break;
                    case 81: /* reduce AOneInputs */
		    {
			ArrayList<Object> list = new81();
			push(goTo(25), list);
		    }
		    break;
                    case 82: /* reduce AManyInputs */
		    {
			ArrayList<Object> list = new82();
			push(goTo(25), list);
		    }
		    break;
                    case 83: /* reduce AInput */
		    {
			ArrayList<Object> list = new83();
			push(goTo(26), list);
		    }
		    break;
                    case 84: /* reduce AAssignExp */
		    {
			ArrayList<Object> list = new84();
			push(goTo(27), list);
		    }
		    break;
                    case 85: /* reduce ADefaultExp */
		    {
			ArrayList<Object> list = new85();
			push(goTo(27), list);
		    }
		    break;
                    case 86: /* reduce AOrOrExp */
		    {
			ArrayList<Object> list = new86();
			push(goTo(28), list);
		    }
		    break;
                    case 87: /* reduce ADefaultOrExp */
		    {
			ArrayList<Object> list = new87();
			push(goTo(28), list);
		    }
		    break;
                    case 88: /* reduce AAndAndExp */
		    {
			ArrayList<Object> list = new88();
			push(goTo(29), list);
		    }
		    break;
                    case 89: /* reduce ADefaultAndExp */
		    {
			ArrayList<Object> list = new89();
			push(goTo(29), list);
		    }
		    break;
                    case 90: /* reduce AEqCmpExp */
		    {
			ArrayList<Object> list = new90();
			push(goTo(30), list);
		    }
		    break;
                    case 91: /* reduce ANeqCmpExp */
		    {
			ArrayList<Object> list = new91();
			push(goTo(30), list);
		    }
		    break;
                    case 92: /* reduce ALtCmpExp */
		    {
			ArrayList<Object> list = new92();
			push(goTo(30), list);
		    }
		    break;
                    case 93: /* reduce AGtCmpExp */
		    {
			ArrayList<Object> list = new93();
			push(goTo(30), list);
		    }
		    break;
                    case 94: /* reduce ALteqCmpExp */
		    {
			ArrayList<Object> list = new94();
			push(goTo(30), list);
		    }
		    break;
                    case 95: /* reduce AGteqCmpExp */
		    {
			ArrayList<Object> list = new95();
			push(goTo(30), list);
		    }
		    break;
                    case 96: /* reduce ADefaultCmpExp */
		    {
			ArrayList<Object> list = new96();
			push(goTo(30), list);
		    }
		    break;
                    case 97: /* reduce APlusAddExp */
		    {
			ArrayList<Object> list = new97();
			push(goTo(31), list);
		    }
		    break;
                    case 98: /* reduce AMinusAddExp */
		    {
			ArrayList<Object> list = new98();
			push(goTo(31), list);
		    }
		    break;
                    case 99: /* reduce ADefaultAddExp */
		    {
			ArrayList<Object> list = new99();
			push(goTo(31), list);
		    }
		    break;
                    case 100: /* reduce AMultMultExp */
		    {
			ArrayList<Object> list = new100();
			push(goTo(32), list);
		    }
		    break;
                    case 101: /* reduce ADivMultExp */
		    {
			ArrayList<Object> list = new101();
			push(goTo(32), list);
		    }
		    break;
                    case 102: /* reduce AModMultExp */
		    {
			ArrayList<Object> list = new102();
			push(goTo(32), list);
		    }
		    break;
                    case 103: /* reduce ADefaultMultExp */
		    {
			ArrayList<Object> list = new103();
			push(goTo(32), list);
		    }
		    break;
                    case 104: /* reduce AJoinJoinExp */
		    {
			ArrayList<Object> list = new104();
			push(goTo(33), list);
		    }
		    break;
                    case 105: /* reduce ADefaultJoinExp */
		    {
			ArrayList<Object> list = new105();
			push(goTo(33), list);
		    }
		    break;
                    case 106: /* reduce AKeepTupleExp */
		    {
			ArrayList<Object> list = new106();
			push(goTo(34), list);
		    }
		    break;
                    case 107: /* reduce ARemoveTupleExp */
		    {
			ArrayList<Object> list = new107();
			push(goTo(34), list);
		    }
		    break;
                    case 108: /* reduce AKeepManyTupleExp */
		    {
			ArrayList<Object> list = new108();
			push(goTo(34), list);
		    }
		    break;
                    case 109: /* reduce ARemoveManyTupleExp */
		    {
			ArrayList<Object> list = new109();
			push(goTo(34), list);
		    }
		    break;
                    case 110: /* reduce ADefaultTupleExp */
		    {
			ArrayList<Object> list = new110();
			push(goTo(34), list);
		    }
		    break;
                    case 111: /* reduce ANotUnaryExp */
		    {
			ArrayList<Object> list = new111();
			push(goTo(35), list);
		    }
		    break;
                    case 112: /* reduce ANegUnaryExp */
		    {
			ArrayList<Object> list = new112();
			push(goTo(35), list);
		    }
		    break;
                    case 113: /* reduce ADefaultUnaryExp */
		    {
			ArrayList<Object> list = new113();
			push(goTo(35), list);
		    }
		    break;
                    case 114: /* reduce ALvalueBaseExp */
		    {
			ArrayList<Object> list = new114();
			push(goTo(36), list);
		    }
		    break;
                    case 115: /* reduce AAcallbaseexp1BaseExp */
		    {
			ArrayList<Object> list = new115();
			push(goTo(36), list);
		    }
		    break;
                    case 116: /* reduce AAcallbaseexp2BaseExp */
		    {
			ArrayList<Object> list = new116();
			push(goTo(36), list);
		    }
		    break;
                    case 117: /* reduce AIntBaseExp */
		    {
			ArrayList<Object> list = new117();
			push(goTo(36), list);
		    }
		    break;
                    case 118: /* reduce ATrueBaseExp */
		    {
			ArrayList<Object> list = new118();
			push(goTo(36), list);
		    }
		    break;
                    case 119: /* reduce AFalseBaseExp */
		    {
			ArrayList<Object> list = new119();
			push(goTo(36), list);
		    }
		    break;
                    case 120: /* reduce AStringBaseExp */
		    {
			ArrayList<Object> list = new120();
			push(goTo(36), list);
		    }
		    break;
                    case 121: /* reduce AAtuplebaseexp1BaseExp */
		    {
			ArrayList<Object> list = new121();
			push(goTo(36), list);
		    }
		    break;
                    case 122: /* reduce AAtuplebaseexp2BaseExp */
		    {
			ArrayList<Object> list = new122();
			push(goTo(36), list);
		    }
		    break;
                    case 123: /* reduce AParenBaseExp */
		    {
			ArrayList<Object> list = new123();
			push(goTo(36), list);
		    }
		    break;
                    case 124: /* reduce AOneExps */
		    {
			ArrayList<Object> list = new124();
			push(goTo(37), list);
		    }
		    break;
                    case 125: /* reduce AManyExps */
		    {
			ArrayList<Object> list = new125();
			push(goTo(37), list);
		    }
		    break;
                    case 126: /* reduce ASimpleLvalue */
		    {
			ArrayList<Object> list = new126();
			push(goTo(38), list);
		    }
		    break;
                    case 127: /* reduce AQualifiedLvalue */
		    {
			ArrayList<Object> list = new127();
			push(goTo(38), list);
		    }
		    break;
                    case 128: /* reduce AOneFieldvalues */
		    {
			ArrayList<Object> list = new128();
			push(goTo(39), list);
		    }
		    break;
                    case 129: /* reduce AManyFieldvalues */
		    {
			ArrayList<Object> list = new129();
			push(goTo(39), list);
		    }
		    break;
                    case 130: /* reduce AFieldvalue */
		    {
			ArrayList<Object> list = new130();
			push(goTo(40), list);
		    }
		    break;
                    case 131: /* reduce ATerminal$Html */
		    {
			ArrayList<Object> list = new131();
			push(goTo(41), list);
		    }
		    break;
                    case 132: /* reduce ANonTerminal$Html */
		    {
			ArrayList<Object> list = new132();
			push(goTo(41), list);
		    }
		    break;
                    case 133: /* reduce ATerminal$Session */
		    {
			ArrayList<Object> list = new133();
			push(goTo(42), list);
		    }
		    break;
                    case 134: /* reduce ANonTerminal$Session */
		    {
			ArrayList<Object> list = new134();
			push(goTo(42), list);
		    }
		    break;
                    case 135: /* reduce ATerminal$Schema */
		    {
			ArrayList<Object> list = new135();
			push(goTo(43), list);
		    }
		    break;
                    case 136: /* reduce ANonTerminal$Schema */
		    {
			ArrayList<Object> list = new136();
			push(goTo(43), list);
		    }
		    break;
                    case 137: /* reduce ATerminal$Variable */
		    {
			ArrayList<Object> list = new137();
			push(goTo(44), list);
		    }
		    break;
                    case 138: /* reduce ANonTerminal$Variable */
		    {
			ArrayList<Object> list = new138();
			push(goTo(44), list);
		    }
		    break;
                    case 139: /* reduce ATerminal$Function */
		    {
			ArrayList<Object> list = new139();
			push(goTo(45), list);
		    }
		    break;
                    case 140: /* reduce ANonTerminal$Function */
		    {
			ArrayList<Object> list = new140();
			push(goTo(45), list);
		    }
		    break;
                    case 141: /* reduce ATerminal$Htmlbody */
		    {
			ArrayList<Object> list = new141();
			push(goTo(46), list);
		    }
		    break;
                    case 142: /* reduce ANonTerminal$Htmlbody */
		    {
			ArrayList<Object> list = new142();
			push(goTo(46), list);
		    }
		    break;
                    case 143: /* reduce ATerminal$Attribute */
		    {
			ArrayList<Object> list = new143();
			push(goTo(47), list);
		    }
		    break;
                    case 144: /* reduce ANonTerminal$Attribute */
		    {
			ArrayList<Object> list = new144();
			push(goTo(47), list);
		    }
		    break;
                    case 145: /* reduce ATerminal$Inputattr */
		    {
			ArrayList<Object> list = new145();
			push(goTo(48), list);
		    }
		    break;
                    case 146: /* reduce ANonTerminal$Inputattr */
		    {
			ArrayList<Object> list = new146();
			push(goTo(48), list);
		    }
		    break;
                    case 147: /* reduce ATerminal$Field */
		    {
			ArrayList<Object> list = new147();
			push(goTo(49), list);
		    }
		    break;
                    case 148: /* reduce ANonTerminal$Field */
		    {
			ArrayList<Object> list = new148();
			push(goTo(49), list);
		    }
		    break;
                    case 149: /* reduce ATerminal$Stm */
		    {
			ArrayList<Object> list = new149();
			push(goTo(50), list);
		    }
		    break;
                    case 150: /* reduce ANonTerminal$Stm */
		    {
			ArrayList<Object> list = new150();
			push(goTo(50), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PService node1 = (PService) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAservice1Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode4, listNode5, listNode6, listNode8);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAservice2Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode5, listNode6, listNode7, listNode9);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAservice3Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode4, listNode6, listNode7, listNode9);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAservice4Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode5, listNode7, listNode8, listNode10);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAservice5Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode4, listNode5, listNode7, listNode9);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAservice6Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode5, listNode6, listNode8, listNode10);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAservice7Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode4, listNode6, listNode8, listNode10);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAservice8Service */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pserviceNode1 = new AService(listNode3, listNode5, listNode7, listNode9, listNode11);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAhtml1Html */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtml phtmlNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }

        phtmlNode1 = new AHtml(tidentifierNode2, listNode3);
        }
	nodeList.add(phtmlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAhtml2Html */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtml phtmlNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        phtmlNode1 = new AHtml(tidentifierNode2, listNode4);
        }
	nodeList.add(phtmlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAtagstarthtmlbody1Htmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        phtmlbodyNode1 = new ATagStartHtmlbody(tidentifierNode2, listNode3);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAtagstarthtmlbody2Htmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        phtmlbodyNode1 = new ATagStartHtmlbody(tidentifierNode2, listNode4);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATagEndHtmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        phtmlbodyNode1 = new ATagEndHtmlbody(tidentifierNode2);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AHoleHtmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        phtmlbodyNode1 = new AHoleHtmlbody(tidentifierNode2);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AWhateverHtmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TWhatever twhateverNode2;
        twhateverNode2 = (TWhatever)nodeArrayList1.get(0);

        phtmlbodyNode1 = new AWhateverHtmlbody(twhateverNode2);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMetaHtmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TMeta tmetaNode2;
        tmetaNode2 = (TMeta)nodeArrayList1.get(0);

        phtmlbodyNode1 = new AMetaHtmlbody(tmetaNode2);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AInputHtmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TInput tinputNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tinputNode2 = (TInput)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        phtmlbodyNode1 = new AInputHtmlbody(tinputNode2, listNode4);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAselecthtmlbody1Htmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TSelect tselectNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TGt tgtNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tselectNode2 = (TSelect)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tgtNode5 = (TGt)nodeArrayList4.get(0);
        {
            // Block
        }

        phtmlbodyNode1 = new ASelectHtmlbody(tselectNode2, listNode4, tgtNode5, listNode6);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAselecthtmlbody2Htmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHtmlbody phtmlbodyNode1;
        {
            // Block
        TSelect tselectNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TGt tgtNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tselectNode2 = (TSelect)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tgtNode5 = (TGt)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        phtmlbodyNode1 = new ASelectHtmlbody(tselectNode2, listNode4, tgtNode5, listNode7);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ANameInputattr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputattr pinputattrNode1;
        {
            // Block
        TName tnameNode2;
        PAttr pattrNode3;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        pattrNode3 = (PAttr)nodeArrayList3.get(0);

        pinputattrNode1 = new ANameInputattr(tnameNode2, pattrNode3);
        }
	nodeList.add(pinputattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ATypeInputattr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputattr pinputattrNode1;
        {
            // Block
        TType ttypeNode2;
        PInputtype pinputtypeNode3;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        pinputtypeNode3 = (PInputtype)nodeArrayList3.get(0);

        pinputattrNode1 = new ATypeInputattr(ttypeNode2, pinputtypeNode3);
        }
	nodeList.add(pinputattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAttributeInputattr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputattr pinputattrNode1;
        {
            // Block
        PAttribute pattributeNode2;
        pattributeNode2 = (PAttribute)nodeArrayList1.get(0);

        pinputattrNode1 = new AAttributeInputattr(pattributeNode2);
        }
	nodeList.add(pinputattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ATexttypeInputtype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputtype pinputtypeNode1;
        {
            // Block
        TText ttextNode2;
        ttextNode2 = (TText)nodeArrayList1.get(0);

        pinputtypeNode1 = new ATexttypeInputtype(ttextNode2);
        }
	nodeList.add(pinputtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ARadiotypeInputtype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputtype pinputtypeNode1;
        {
            // Block
        TRadio tradioNode2;
        tradioNode2 = (TRadio)nodeArrayList1.get(0);

        pinputtypeNode1 = new ARadiotypeInputtype(tradioNode2);
        }
	nodeList.add(pinputtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AStrtypeInputtype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputtype pinputtypeNode1;
        {
            // Block
        TStringconst tstringconstNode2;
        tstringconstNode2 = (TStringconst)nodeArrayList1.get(0);

        pinputtypeNode1 = new AStrtypeInputtype(tstringconstNode2);
        }
	nodeList.add(pinputtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAttrAttribute */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        PAttr pattrNode2;
        pattrNode2 = (PAttr)nodeArrayList1.get(0);

        pattributeNode1 = new AAttrAttribute(pattrNode2);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAssignAttribute */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        PAttr pattrNode2;
        PAttr pattrNode3;
        pattrNode2 = (PAttr)nodeArrayList1.get(0);
        pattrNode3 = (PAttr)nodeArrayList3.get(0);

        pattributeNode1 = new AAssignAttribute(pattrNode2, pattrNode3);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdAttr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttr pattrNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pattrNode1 = new AIdAttr(tidentifierNode2);
        }
	nodeList.add(pattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AStrAttr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttr pattrNode1;
        {
            // Block
        TStringconst tstringconstNode2;
        tstringconstNode2 = (TStringconst)nodeArrayList1.get(0);

        pattrNode1 = new AStrAttr(tstringconstNode2);
        }
	nodeList.add(pattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIconstAttr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttr pattrNode1;
        {
            // Block
        PIntconst pintconstNode2;
        pintconstNode2 = (PIntconst)nodeArrayList1.get(0);

        pattrNode1 = new AIconstAttr(pintconstNode2);
        }
	nodeList.add(pattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANegintIntconst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntconst pintconstNode1;
        {
            // Block
        TNegIntconst tnegintconstNode2;
        tnegintconstNode2 = (TNegIntconst)nodeArrayList1.get(0);

        pintconstNode1 = new ANegintIntconst(tnegintconstNode2);
        }
	nodeList.add(pintconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce APosintIntconst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntconst pintconstNode1;
        {
            // Block
        TPosIntconst tposintconstNode2;
        tposintconstNode2 = (TPosIntconst)nodeArrayList1.get(0);

        pintconstNode1 = new APosintIntconst(tposintconstNode2);
        }
	nodeList.add(pintconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAschema1Schema */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSchema pschemaNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pschemaNode1 = new ASchema(tidentifierNode2, listNode3);
        }
	nodeList.add(pschemaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAschema2Schema */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSchema pschemaNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pschemaNode1 = new ASchema(tidentifierNode2, listNode4);
        }
	nodeList.add(pschemaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pfieldNode1 = new AField(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PType ptypeNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvariableNode1 = new AVariable(ptypeNode2, listNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AOneIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AManyIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TIdentifier tidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIntSimpletype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ABoolSimpletype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AStringSimpletype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AVoidSimpletype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypeNode1 = new AVoidType(tvoidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASimpleType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList1.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATupleType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        ptypeNode1 = new ATupleType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PCompoundstm pcompoundstmNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        pcompoundstmNode5 = (PCompoundstm)nodeArrayList5.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifierNode3, listNode4, pcompoundstmNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PCompoundstm pcompoundstmNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pcompoundstmNode6 = (PCompoundstm)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifierNode3, listNode5, pcompoundstmNode6);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AOneArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgument pargumentNode1;
        pargumentNode1 = (PArgument)nodeArrayList1.get(0);
	if(pargumentNode1 != null)
	{
	  listNode2.add(pargumentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AManyArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgument pargumentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentNode2 = (PArgument)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentNode2 != null)
	{
	  listNode3.add(pargumentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AArgument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pargumentNode1 = new AArgument(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASession */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSession psessionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PCompoundstm pcompoundstmNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pcompoundstmNode3 = (PCompoundstm)nodeArrayList5.get(0);

        psessionNode1 = new ASession(tidentifierNode2, pcompoundstmNode3);
        }
	nodeList.add(psessionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEmptyStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block

        pstmNode1 = new AEmptyStm();
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAshowstm1Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PDocument pdocumentNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pdocumentNode2 = (PDocument)nodeArrayList2.get(0);

        pstmNode1 = new AShowStm(pdocumentNode2, null);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAshowstm2Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PDocument pdocumentNode2;
        PReceive preceiveNode3;
        pdocumentNode2 = (PDocument)nodeArrayList2.get(0);
        preceiveNode3 = (PReceive)nodeArrayList3.get(0);

        pstmNode1 = new AShowStm(pdocumentNode2, preceiveNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExitStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PDocument pdocumentNode2;
        pdocumentNode2 = (PDocument)nodeArrayList2.get(0);

        pstmNode1 = new AExitStm(pdocumentNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AReturnStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block

        pstmNode1 = new AReturnStm();
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AReturnexpStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pstmNode1 = new AReturnexpStm(pexpNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AIfStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        PStm pstmNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AIfStm(pexpNode2, pstmNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AIfelseStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        PStm pstmNode3;
        PStm pstmNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);
        pstmNode4 = (PStm)nodeArrayList7.get(0);

        pstmNode1 = new AIfelseStm(pexpNode2, pstmNode3, pstmNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AWhileStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        PStm pstmNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AWhileStm(pexpNode2, pstmNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ACompStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PCompoundstm pcompoundstmNode2;
        pcompoundstmNode2 = (PCompoundstm)nodeArrayList1.get(0);

        pstmNode1 = new ACompStm(pcompoundstmNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pstmNode1 = new AExpStm(pexpNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AEmptyStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block

        pstmNode1 = new AEmptyStm();
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAshowstmnoshortif1StmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PDocument pdocumentNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pdocumentNode2 = (PDocument)nodeArrayList2.get(0);

        pstmNode1 = new AShowStm(pdocumentNode2, null);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAshowstmnoshortif2StmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PDocument pdocumentNode2;
        PReceive preceiveNode3;
        pdocumentNode2 = (PDocument)nodeArrayList2.get(0);
        preceiveNode3 = (PReceive)nodeArrayList3.get(0);

        pstmNode1 = new AShowStm(pdocumentNode2, preceiveNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AExitStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PDocument pdocumentNode2;
        pdocumentNode2 = (PDocument)nodeArrayList2.get(0);

        pstmNode1 = new AExitStm(pdocumentNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AReturnStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block

        pstmNode1 = new AReturnStm();
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AReturnexpStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pstmNode1 = new AReturnexpStm(pexpNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AIfelseStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        PStm pstmNode3;
        PStm pstmNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);
        pstmNode4 = (PStm)nodeArrayList7.get(0);

        pstmNode1 = new AIfelseStm(pexpNode2, pstmNode3, pstmNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AWhileStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        PStm pstmNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AWhileStm(pexpNode2, pstmNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ACompStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PCompoundstm pcompoundstmNode2;
        pcompoundstmNode2 = (PCompoundstm)nodeArrayList1.get(0);

        pstmNode1 = new ACompStm(pcompoundstmNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AExpStmNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pstmNode1 = new AExpStm(pexpNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AIdDocument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDocument pdocumentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pdocumentNode1 = new AIdDocument(tidentifierNode2);
        }
	nodeList.add(pdocumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce APlugDocument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDocument pdocumentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdocumentNode1 = new APlugDocument(tidentifierNode2, listNode4);
        }
	nodeList.add(pdocumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AReceive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReceive preceiveNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        preceiveNode1 = new AReceive(listNode3);
        }
	nodeList.add(preceiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAcompoundstm1Compoundstm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundstm pcompoundstmNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pcompoundstmNode1 = new ACompoundstm(listNode2, listNode3);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AAcompoundstm2Compoundstm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundstm pcompoundstmNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pcompoundstmNode1 = new ACompoundstm(listNode3, listNode4);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAcompoundstm3Compoundstm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundstm pcompoundstmNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcompoundstmNode1 = new ACompoundstm(listNode2, listNode4);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAcompoundstm4Compoundstm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundstm pcompoundstmNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcompoundstmNode1 = new ACompoundstm(listNode3, listNode5);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AOnePlugs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPlug pplugNode1;
        pplugNode1 = (PPlug)nodeArrayList1.get(0);
	if(pplugNode1 != null)
	{
	  listNode2.add(pplugNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AManyPlugs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPlug pplugNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pplugNode2 = (PPlug)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pplugNode2 != null)
	{
	  listNode3.add(pplugNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce APlug */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlug pplugNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pplugNode1 = new APlug(tidentifierNode2, pexpNode3);
        }
	nodeList.add(pplugNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AOneInputs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInput pinputNode1;
        pinputNode1 = (PInput)nodeArrayList1.get(0);
	if(pinputNode1 != null)
	{
	  listNode2.add(pinputNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AManyInputs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInput pinputNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinputNode2 = (PInput)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinputNode2 != null)
	{
	  listNode3.add(pinputNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AInput */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInput pinputNode1;
        {
            // Block
        PLvalue plvalueNode2;
        TIdentifier tidentifierNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        pinputNode1 = new AInput(plvalueNode2, tidentifierNode3);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAssignExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PLvalue plvalueNode2;
        PExp pexpNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAssignExp(plvalueNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ADefaultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AOrOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ADefaultOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAndAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ADefaultAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AEqCmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANeqCmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANeqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ALtCmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AGtCmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ALteqCmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALteqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AGteqCmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGteqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ADefaultCmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce APlusAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AMinusAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ADefaultAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AMultMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ADivMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AModMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ADefaultMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce AJoinJoinExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AJoinExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ADefaultJoinExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AKeepTupleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TIdentifier tidentifierNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        pexpNode1 = new AKeepExp(pexpNode2, tidentifierNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ARemoveTupleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TIdentifier tidentifierNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        pexpNode1 = new ARemoveExp(pexpNode2, tidentifierNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AKeepManyTupleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new AKeepManyExp(pexpNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ARemoveManyTupleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new ARemoveManyExp(pexpNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ADefaultTupleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ANotUnaryExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANegUnaryExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ADefaultUnaryExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ALvalueBaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PLvalue plvalueNode2;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);

        pexpNode1 = new ALvalueExp(plvalueNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce AAcallbaseexp1BaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpNode1 = new ACallExp(tidentifierNode2, listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce AAcallbaseexp2BaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new ACallExp(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce AIntBaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PIntconst pintconstNode2;
        pintconstNode2 = (PIntconst)nodeArrayList1.get(0);

        pexpNode1 = new AIntExp(pintconstNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ATrueBaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpNode1 = new ATrueExp(ttrueNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce AFalseBaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpNode1 = new AFalseExp(tfalseNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce AStringBaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TStringconst tstringconstNode2;
        tstringconstNode2 = (TStringconst)nodeArrayList1.get(0);

        pexpNode1 = new AStringExp(tstringconstNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce AAtuplebaseexp1BaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pexpNode1 = new ATupleExp(listNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce AAtuplebaseexp2BaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexpNode1 = new ATupleExp(listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce AParenBaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce AOneExps */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce AManyExps */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce ASimpleLvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalueNode1 = new ASimpleLvalue(tidentifierNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce AQualifiedLvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        plvalueNode1 = new AQualifiedLvalue(tidentifierNode2, tidentifierNode3);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce AOneFieldvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFieldvalue pfieldvalueNode1;
        pfieldvalueNode1 = (PFieldvalue)nodeArrayList1.get(0);
	if(pfieldvalueNode1 != null)
	{
	  listNode2.add(pfieldvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new129() /* reduce AManyFieldvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFieldvalue pfieldvalueNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfieldvalueNode2 = (PFieldvalue)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldvalueNode2 != null)
	{
	  listNode3.add(pfieldvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new130() /* reduce AFieldvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFieldvalue pfieldvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pfieldvalueNode1 = new AFieldvalue(tidentifierNode2, pexpNode3);
        }
	nodeList.add(pfieldvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new131() /* reduce ATerminal$Html */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PHtml phtmlNode1;
        phtmlNode1 = (PHtml)nodeArrayList1.get(0);
	if(phtmlNode1 != null)
	{
	  listNode2.add(phtmlNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new132() /* reduce ANonTerminal$Html */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PHtml phtmlNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        phtmlNode2 = (PHtml)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(phtmlNode2 != null)
	{
	  listNode3.add(phtmlNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new133() /* reduce ATerminal$Session */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSession psessionNode1;
        psessionNode1 = (PSession)nodeArrayList1.get(0);
	if(psessionNode1 != null)
	{
	  listNode2.add(psessionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new134() /* reduce ANonTerminal$Session */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSession psessionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psessionNode2 = (PSession)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psessionNode2 != null)
	{
	  listNode3.add(psessionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new135() /* reduce ATerminal$Schema */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSchema pschemaNode1;
        pschemaNode1 = (PSchema)nodeArrayList1.get(0);
	if(pschemaNode1 != null)
	{
	  listNode2.add(pschemaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new136() /* reduce ANonTerminal$Schema */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSchema pschemaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pschemaNode2 = (PSchema)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pschemaNode2 != null)
	{
	  listNode3.add(pschemaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new137() /* reduce ATerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariable pvariableNode1;
        pvariableNode1 = (PVariable)nodeArrayList1.get(0);
	if(pvariableNode1 != null)
	{
	  listNode2.add(pvariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new138() /* reduce ANonTerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariable pvariableNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariableNode2 = (PVariable)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariableNode2 != null)
	{
	  listNode3.add(pvariableNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new139() /* reduce ATerminal$Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunction pfunctionNode1;
        pfunctionNode1 = (PFunction)nodeArrayList1.get(0);
	if(pfunctionNode1 != null)
	{
	  listNode2.add(pfunctionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new140() /* reduce ANonTerminal$Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunction pfunctionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctionNode2 = (PFunction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionNode2 != null)
	{
	  listNode3.add(pfunctionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new141() /* reduce ATerminal$Htmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PHtmlbody phtmlbodyNode1;
        phtmlbodyNode1 = (PHtmlbody)nodeArrayList1.get(0);
	if(phtmlbodyNode1 != null)
	{
	  listNode2.add(phtmlbodyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new142() /* reduce ANonTerminal$Htmlbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PHtmlbody phtmlbodyNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        phtmlbodyNode2 = (PHtmlbody)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(phtmlbodyNode2 != null)
	{
	  listNode3.add(phtmlbodyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new143() /* reduce ATerminal$Attribute */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAttribute pattributeNode1;
        pattributeNode1 = (PAttribute)nodeArrayList1.get(0);
	if(pattributeNode1 != null)
	{
	  listNode2.add(pattributeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new144() /* reduce ANonTerminal$Attribute */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAttribute pattributeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pattributeNode2 = (PAttribute)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pattributeNode2 != null)
	{
	  listNode3.add(pattributeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new145() /* reduce ATerminal$Inputattr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInputattr pinputattrNode1;
        pinputattrNode1 = (PInputattr)nodeArrayList1.get(0);
	if(pinputattrNode1 != null)
	{
	  listNode2.add(pinputattrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new146() /* reduce ANonTerminal$Inputattr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInputattr pinputattrNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinputattrNode2 = (PInputattr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinputattrNode2 != null)
	{
	  listNode3.add(pinputattrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new147() /* reduce ATerminal$Field */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PField pfieldNode1;
        pfieldNode1 = (PField)nodeArrayList1.get(0);
	if(pfieldNode1 != null)
	{
	  listNode2.add(pfieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new148() /* reduce ANonTerminal$Field */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PField pfieldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfieldNode2 = (PField)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldNode2 != null)
	{
	  listNode3.add(pfieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new149() /* reduce ATerminal$Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStm pstmNode1;
        pstmNode1 = (PStm)nodeArrayList1.get(0);
	if(pstmNode1 != null)
	{
	  listNode2.add(pstmNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new150() /* reduce ANonTerminal$Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStm pstmNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmNode2 = (PStm)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmNode2 != null)
	{
	  listNode3.add(pstmNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {31, SHIFT, 3}, },
			{{-1, ERROR, 2}, {64, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 7}, },
			{{-1, REDUCE, 131}, },
			{{-1, ERROR, 6}, {1, SHIFT, 4}, {4, SHIFT, 8}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, ERROR, 7}, {61, SHIFT, 26}, },
			{{-1, ERROR, 8}, {61, SHIFT, 27}, },
			{{-1, ERROR, 9}, {61, SHIFT, 28}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 14}, {61, SHIFT, 29}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 19}, {61, SHIFT, 30}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 133}, },
			{{-1, ERROR, 22}, {5, SHIFT, 9}, {32, SHIFT, 32}, },
			{{-1, ERROR, 23}, {4, SHIFT, 8}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, ERROR, 24}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, ERROR, 25}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, ERROR, 26}, {33, SHIFT, 44}, },
			{{-1, ERROR, 27}, {31, SHIFT, 45}, },
			{{-1, ERROR, 28}, {40, SHIFT, 46}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 36}, {40, SHIFT, 47}, },
			{{-1, ERROR, 31}, {34, SHIFT, 48}, {44, SHIFT, 49}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 136}, },
			{{-1, ERROR, 35}, {5, SHIFT, 9}, {32, SHIFT, 50}, },
			{{-1, ERROR, 36}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, ERROR, 37}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, REDUCE, 138}, },
			{{-1, ERROR, 39}, {5, SHIFT, 9}, {32, SHIFT, 54}, },
			{{-1, ERROR, 40}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, ERROR, 41}, {61, SHIFT, 56}, },
			{{-1, REDUCE, 140}, },
			{{-1, ERROR, 43}, {5, SHIFT, 9}, {32, SHIFT, 57}, },
			{{-1, ERROR, 44}, {3, SHIFT, 58}, },
			{{-1, ERROR, 45}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {32, SHIFT, 59}, },
			{{-1, ERROR, 46}, {41, SHIFT, 63}, },
			{{-1, ERROR, 47}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {41, SHIFT, 64}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 49}, {61, SHIFT, 68}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 51}, {5, SHIFT, 9}, {32, SHIFT, 69}, },
			{{-1, ERROR, 52}, {5, SHIFT, 9}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, ERROR, 53}, {5, SHIFT, 9}, {32, SHIFT, 71}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 55}, {5, SHIFT, 9}, {32, SHIFT, 72}, },
			{{-1, ERROR, 56}, {40, SHIFT, 47}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 58}, {21, SHIFT, 73}, {22, SHIFT, 74}, {35, SHIFT, 75}, {37, SHIFT, 76}, {38, SHIFT, 77}, {63, SHIFT, 78}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 147}, },
			{{-1, ERROR, 61}, {61, SHIFT, 81}, },
			{{-1, ERROR, 62}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {32, SHIFT, 82}, },
			{{-1, ERROR, 63}, {31, SHIFT, 84}, },
			{{-1, ERROR, 64}, {31, SHIFT, 84}, },
			{{-1, ERROR, 65}, {61, SHIFT, 87}, },
			{{-1, ERROR, 66}, {41, SHIFT, 88}, {44, SHIFT, 89}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 70}, {5, SHIFT, 9}, {32, SHIFT, 90}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 74}, {34, SHIFT, 91}, },
			{{-1, ERROR, 75}, {23, SHIFT, 92}, {26, SHIFT, 93}, {61, SHIFT, 94}, },
			{{-1, ERROR, 76}, {61, SHIFT, 95}, },
			{{-1, ERROR, 77}, {61, SHIFT, 96}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 141}, },
			{{-1, ERROR, 80}, {21, SHIFT, 73}, {22, SHIFT, 97}, {35, SHIFT, 75}, {37, SHIFT, 76}, {38, SHIFT, 77}, {63, SHIFT, 78}, },
			{{-1, ERROR, 81}, {34, SHIFT, 99}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 148}, },
			{{-1, ERROR, 84}, {6, SHIFT, 100}, {7, SHIFT, 101}, {8, SHIFT, 102}, {9, SHIFT, 103}, {11, SHIFT, 104}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 105}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {32, SHIFT, 110}, {34, SHIFT, 111}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 88}, {31, SHIFT, 84}, },
			{{-1, ERROR, 89}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 92}, {24, SHIFT, 108}, {25, SHIFT, 109}, {27, SHIFT, 136}, {28, SHIFT, 137}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, ERROR, 93}, {24, SHIFT, 108}, {25, SHIFT, 109}, {27, SHIFT, 136}, {28, SHIFT, 137}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, ERROR, 94}, {24, SHIFT, 108}, {25, SHIFT, 109}, {36, SHIFT, 146}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, ERROR, 95}, {36, SHIFT, 149}, },
			{{-1, ERROR, 96}, {39, SHIFT, 150}, },
			{{-1, ERROR, 97}, {34, SHIFT, 151}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 100}, {12, SHIFT, 152}, {61, SHIFT, 153}, },
			{{-1, ERROR, 101}, {12, SHIFT, 152}, {61, SHIFT, 153}, },
			{{-1, ERROR, 102}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {34, SHIFT, 157}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 103}, {40, SHIFT, 159}, },
			{{-1, ERROR, 104}, {40, SHIFT, 160}, },
			{{-1, ERROR, 105}, {31, SHIFT, 161}, {61, SHIFT, 29}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 112}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 113}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 114}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 126}, {40, SHIFT, 166}, {60, SHIFT, 167}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 118}, {61, SHIFT, 168}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 121}, {34, SHIFT, 169}, },
			{{-1, REDUCE, 85}, {59, SHIFT, 170}, },
			{{-1, REDUCE, 87}, {58, SHIFT, 171}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 96}, {35, SHIFT, 172}, {36, SHIFT, 173}, {48, SHIFT, 174}, {49, SHIFT, 175}, {50, SHIFT, 176}, {51, SHIFT, 177}, {53, SHIFT, 178}, {54, SHIFT, 179}, },
			{{-1, REDUCE, 99}, {55, SHIFT, 180}, {56, SHIFT, 181}, {57, SHIFT, 182}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 105}, {45, SHIFT, 183}, {46, SHIFT, 184}, {47, SHIFT, 185}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 114}, {33, SHIFT, 186}, },
			{{-1, ERROR, 132}, {6, SHIFT, 100}, {7, SHIFT, 101}, {8, SHIFT, 102}, {9, SHIFT, 103}, {11, SHIFT, 104}, {14, SHIFT, 10}, {15, SHIFT, 11}, {16, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 105}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {32, SHIFT, 187}, {34, SHIFT, 111}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 133}, {6, SHIFT, 100}, {7, SHIFT, 101}, {8, SHIFT, 102}, {9, SHIFT, 103}, {11, SHIFT, 104}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {32, SHIFT, 189}, {34, SHIFT, 111}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 136}, {33, SHIFT, 191}, },
			{{-1, ERROR, 137}, {33, SHIFT, 192}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 25}, {33, SHIFT, 193}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 144}, {24, SHIFT, 108}, {25, SHIFT, 109}, {27, SHIFT, 136}, {28, SHIFT, 137}, {36, SHIFT, 194}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, ERROR, 145}, {24, SHIFT, 108}, {25, SHIFT, 109}, {27, SHIFT, 136}, {28, SHIFT, 137}, {36, SHIFT, 196}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 143}, },
			{{-1, ERROR, 148}, {24, SHIFT, 108}, {25, SHIFT, 109}, {36, SHIFT, 197}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 152}, {61, SHIFT, 199}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 154}, {13, SHIFT, 200}, {34, SHIFT, 201}, },
			{{-1, ERROR, 155}, {34, SHIFT, 203}, },
			{{-1, ERROR, 156}, {31, SHIFT, 161}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 158}, {34, SHIFT, 204}, },
			{{-1, ERROR, 159}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 160}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 161}, {32, SHIFT, 207}, {61, SHIFT, 208}, },
			{{-1, ERROR, 162}, {41, SHIFT, 211}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 166}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {41, SHIFT, 212}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 167}, {61, SHIFT, 215}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 170}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 171}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 172}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 173}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 174}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 175}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 176}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 177}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 178}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 179}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 180}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 181}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 182}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 183}, {40, SHIFT, 229}, {61, SHIFT, 230}, },
			{{-1, ERROR, 184}, {40, SHIFT, 231}, {61, SHIFT, 232}, },
			{{-1, ERROR, 185}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 186}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 188}, {6, SHIFT, 100}, {7, SHIFT, 101}, {8, SHIFT, 102}, {9, SHIFT, 103}, {11, SHIFT, 104}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {32, SHIFT, 235}, {34, SHIFT, 111}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 150}, },
			{{-1, ERROR, 191}, {29, SHIFT, 236}, {30, SHIFT, 237}, {62, SHIFT, 238}, },
			{{-1, ERROR, 192}, {24, SHIFT, 108}, {25, SHIFT, 109}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, ERROR, 193}, {24, SHIFT, 108}, {25, SHIFT, 109}, {61, SHIFT, 138}, {62, SHIFT, 139}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 146}, },
			{{-1, ERROR, 196}, {21, SHIFT, 73}, {35, SHIFT, 75}, {37, SHIFT, 242}, {38, SHIFT, 77}, {63, SHIFT, 78}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 144}, },
			{{-1, ERROR, 199}, {42, SHIFT, 244}, },
			{{-1, ERROR, 200}, {42, SHIFT, 245}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 202}, {34, SHIFT, 246}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 205}, {41, SHIFT, 247}, },
			{{-1, ERROR, 206}, {41, SHIFT, 248}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 208}, {33, SHIFT, 249}, },
			{{-1, ERROR, 209}, {32, SHIFT, 250}, {44, SHIFT, 251}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 214}, {41, SHIFT, 252}, {44, SHIFT, 253}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 86}, {58, SHIFT, 171}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 92}, {53, SHIFT, 178}, {54, SHIFT, 179}, },
			{{-1, REDUCE, 93}, {53, SHIFT, 178}, {54, SHIFT, 179}, },
			{{-1, REDUCE, 90}, {53, SHIFT, 178}, {54, SHIFT, 179}, },
			{{-1, REDUCE, 91}, {53, SHIFT, 178}, {54, SHIFT, 179}, },
			{{-1, REDUCE, 94}, {53, SHIFT, 178}, {54, SHIFT, 179}, },
			{{-1, REDUCE, 95}, {53, SHIFT, 178}, {54, SHIFT, 179}, },
			{{-1, REDUCE, 98}, {55, SHIFT, 180}, {56, SHIFT, 181}, {57, SHIFT, 182}, },
			{{-1, REDUCE, 97}, {55, SHIFT, 180}, {56, SHIFT, 181}, {57, SHIFT, 182}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 229}, {61, SHIFT, 168}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 231}, {61, SHIFT, 168}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 84}, {59, SHIFT, 170}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 242}, {26, SHIFT, 256}, {61, SHIFT, 95}, },
			{{-1, ERROR, 243}, {21, SHIFT, 73}, {35, SHIFT, 75}, {37, SHIFT, 257}, {38, SHIFT, 77}, {63, SHIFT, 78}, },
			{{-1, ERROR, 244}, {61, SHIFT, 258}, },
			{{-1, ERROR, 245}, {61, SHIFT, 261}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 247}, {6, SHIFT, 265}, {7, SHIFT, 266}, {8, SHIFT, 267}, {9, SHIFT, 268}, {11, SHIFT, 269}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {34, SHIFT, 270}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 248}, {6, SHIFT, 100}, {7, SHIFT, 101}, {8, SHIFT, 102}, {9, SHIFT, 103}, {11, SHIFT, 104}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {34, SHIFT, 111}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 249}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 251}, {61, SHIFT, 208}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 253}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 254}, {41, SHIFT, 279}, {44, SHIFT, 49}, },
			{{-1, ERROR, 255}, {41, SHIFT, 280}, {44, SHIFT, 49}, },
			{{-1, ERROR, 256}, {36, SHIFT, 281}, },
			{{-1, ERROR, 257}, {26, SHIFT, 282}, {61, SHIFT, 95}, },
			{{-1, ERROR, 258}, {33, SHIFT, 283}, },
			{{-1, ERROR, 259}, {43, SHIFT, 284}, {44, SHIFT, 285}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 126}, {60, SHIFT, 167}, },
			{{-1, ERROR, 262}, {43, SHIFT, 286}, {44, SHIFT, 287}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 264}, {33, SHIFT, 288}, },
			{{-1, ERROR, 265}, {12, SHIFT, 152}, {61, SHIFT, 153}, },
			{{-1, ERROR, 266}, {12, SHIFT, 152}, {61, SHIFT, 153}, },
			{{-1, ERROR, 267}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {34, SHIFT, 291}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 268}, {40, SHIFT, 293}, },
			{{-1, ERROR, 269}, {40, SHIFT, 294}, },
			{{-1, REDUCE, 50}, {10, REDUCE, 61}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 272}, {10, SHIFT, 295}, },
			{{-1, REDUCE, 59}, {10, REDUCE, 69}, },
			{{-1, ERROR, 274}, {34, SHIFT, 296}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 282}, {36, SHIFT, 297}, },
			{{-1, ERROR, 283}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 285}, {61, SHIFT, 258}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 287}, {61, SHIFT, 261}, },
			{{-1, ERROR, 288}, {61, SHIFT, 301}, },
			{{-1, ERROR, 289}, {13, SHIFT, 200}, {34, SHIFT, 302}, },
			{{-1, ERROR, 290}, {34, SHIFT, 304}, },
			{{-1, REDUCE, 54}, {10, REDUCE, 65}, },
			{{-1, ERROR, 292}, {34, SHIFT, 305}, },
			{{-1, ERROR, 293}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 294}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 295}, {6, SHIFT, 100}, {7, SHIFT, 101}, {8, SHIFT, 102}, {9, SHIFT, 103}, {11, SHIFT, 104}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {34, SHIFT, 111}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 60}, {10, REDUCE, 70}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 51}, {10, REDUCE, 62}, },
			{{-1, ERROR, 303}, {34, SHIFT, 309}, },
			{{-1, REDUCE, 53}, {10, REDUCE, 64}, },
			{{-1, REDUCE, 55}, {10, REDUCE, 66}, },
			{{-1, ERROR, 306}, {41, SHIFT, 310}, },
			{{-1, ERROR, 307}, {41, SHIFT, 311}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 52}, {10, REDUCE, 63}, },
			{{-1, ERROR, 310}, {6, SHIFT, 265}, {7, SHIFT, 266}, {8, SHIFT, 267}, {9, SHIFT, 268}, {11, SHIFT, 269}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {34, SHIFT, 270}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 311}, {6, SHIFT, 265}, {7, SHIFT, 266}, {8, SHIFT, 267}, {9, SHIFT, 268}, {11, SHIFT, 269}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {34, SHIFT, 270}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, ERROR, 312}, {10, SHIFT, 314}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 314}, {6, SHIFT, 265}, {7, SHIFT, 266}, {8, SHIFT, 267}, {9, SHIFT, 268}, {11, SHIFT, 269}, {18, SHIFT, 156}, {19, SHIFT, 106}, {20, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, {31, SHIFT, 84}, {34, SHIFT, 270}, {40, SHIFT, 112}, {52, SHIFT, 113}, {53, SHIFT, 114}, {61, SHIFT, 115}, {62, SHIFT, 116}, },
			{{-1, REDUCE, 67}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, {6, 15}, },
			{{-1, 79}, {80, 98}, {243, 98}, },
			{{-1, 140}, {144, 195}, {145, 195}, },
			{{-1, 239}, },
			{{-1, 141}, {94, 147}, {148, 198}, },
			{{-1, 142}, {192, 240}, {193, 241}, },
			{{-1, 117}, {92, 143}, {93, 143}, {94, 143}, {144, 143}, {145, 143}, {148, 143}, {192, 143}, {193, 143}, },
			{{-1, 16}, {23, 34}, },
			{{-1, 60}, {62, 83}, },
			{{-1, 17}, {24, 38}, {36, 38}, {132, 38}, },
			{{-1, 31}, {229, 254}, {231, 255}, },
			{{-1, 18}, {45, 61}, {62, 61}, },
			{{-1, 19}, {25, 41}, {37, 41}, {40, 41}, {47, 65}, {52, 41}, {84, 118}, {89, 65}, {132, 118}, },
			{{-1, 20}, {25, 42}, {37, 42}, {40, 42}, {52, 42}, },
			{{-1, 66}, },
			{{-1, 67}, {89, 135}, },
			{{-1, 21}, {22, 33}, {35, 33}, {39, 33}, {43, 33}, {51, 33}, {53, 33}, {55, 33}, {70, 33}, },
			{{-1, 119}, {133, 190}, {188, 190}, {247, 271}, {248, 275}, {295, 308}, {310, 271}, {311, 275}, {314, 308}, },
			{{-1, 272}, {310, 312}, {311, 313}, {314, 315}, },
			{{-1, 154}, {101, 155}, {265, 289}, {266, 290}, },
			{{-1, 202}, {289, 303}, },
			{{-1, 120}, {63, 85}, {64, 86}, {88, 134}, {247, 273}, {310, 273}, {311, 273}, {314, 273}, },
			{{-1, 259}, },
			{{-1, 260}, {285, 299}, },
			{{-1, 262}, },
			{{-1, 263}, {287, 300}, },
			{{-1, 121}, {102, 158}, {112, 162}, {159, 205}, {160, 206}, {166, 213}, {247, 274}, {249, 276}, {253, 278}, {267, 292}, {283, 298}, {293, 306}, {294, 307}, {310, 274}, {311, 274}, {314, 274}, },
			{{-1, 122}, {186, 234}, },
			{{-1, 123}, {170, 216}, },
			{{-1, 124}, {171, 217}, },
			{{-1, 125}, {172, 218}, {173, 219}, {174, 220}, {175, 221}, {176, 222}, {177, 223}, },
			{{-1, 126}, {178, 224}, {179, 225}, },
			{{-1, 127}, {180, 226}, {181, 227}, {182, 228}, {185, 233}, },
			{{-1, 128}, },
			{{-1, 129}, },
			{{-1, 130}, {113, 163}, {114, 165}, },
			{{-1, 214}, },
			{{-1, 131}, {113, 164}, {114, 164}, {170, 164}, {171, 164}, {172, 164}, {173, 164}, {174, 164}, {175, 164}, {176, 164}, {177, 164}, {178, 164}, {179, 164}, {180, 164}, {181, 164}, {182, 164}, {185, 164}, {186, 164}, {245, 264}, {287, 264}, },
			{{-1, 209}, },
			{{-1, 210}, {251, 277}, },
			{{-1, 6}, },
			{{-1, 22}, {23, 35}, {24, 39}, {25, 43}, {36, 51}, {37, 53}, {40, 55}, {52, 70}, },
			{{-1, 23}, },
			{{-1, 24}, {23, 36}, {84, 132}, },
			{{-1, 25}, {23, 37}, {24, 40}, {36, 52}, },
			{{-1, 80}, {196, 243}, },
			{{-1, 148}, },
			{{-1, 144}, {93, 145}, },
			{{-1, 62}, },
			{{-1, 133}, {132, 188}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'service'",
			"expecting: '{'",
			"expecting: EOF",
			"expecting: 'const'",
			"expecting: 'html'",
			"expecting: 'const', 'schema', 'session', 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: identifier",
			"expecting: 'schema', 'session', 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: 'session', 'show', 'exit', 'return', 'if', 'while', 'int', 'bool', 'string', 'void', 'tuple', 'true', 'false', pos intconst, neg intconst, '{', '}', ';', '(', '!', '-', identifier, stringconst",
			"expecting: 'session', 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: 'session', '}'",
			"expecting: '='",
			"expecting: '('",
			"expecting: ';', '(', ','",
			"expecting: ';', ','",
			"expecting: '<html>'",
			"expecting: 'int', 'bool', 'string', 'void', '}'",
			"expecting: ')'",
			"expecting: 'int', 'bool', 'string', 'void', 'tuple', ')'",
			"expecting: meta, '</html>', '<', '</', '<[', whatever",
			"expecting: ')', ','",
			"expecting: ';', ')', ','",
			"expecting: ';'",
			"expecting: 'input', 'select', identifier",
			"expecting: 'show', 'exit', 'return', 'if', 'while', 'int', 'bool', 'string', 'void', 'tuple', 'true', 'false', pos intconst, neg intconst, '{', '}', ';', '(', '!', '-', identifier, stringconst",
			"expecting: 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: pos intconst, neg intconst, 'type', 'name', identifier, stringconst",
			"expecting: pos intconst, neg intconst, '>', identifier, stringconst",
			"expecting: '>'",
			"expecting: ']>'",
			"expecting: 'plug', identifier",
			"expecting: 'tuple', 'true', 'false', pos intconst, neg intconst, ';', '(', '!', '-', identifier, stringconst",
			"expecting: '{', identifier",
			"expecting: '}', ';', '<', '>', ')', ']', ',', '\+', '\-', '<<', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||'",
			"expecting: pos intconst, neg intconst, 'type', 'name', '}', '=', ';', '<', '>', ')', ']', ',', '\+', '\-', '<<', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||', identifier, stringconst",
			"expecting: 'session', 'show', 'exit', 'return', 'if', 'else', 'while', 'int', 'bool', 'string', 'void', 'tuple', 'true', 'false', pos intconst, neg intconst, '{', '}', ';', '(', '!', '-', identifier, stringconst",
			"expecting: 'show', 'exit', 'return', 'if', 'while', 'tuple', 'true', 'false', pos intconst, neg intconst, '{', '}', ';', '(', '!', '-', identifier, stringconst",
			"expecting: 'tuple', 'true', 'false', pos intconst, neg intconst, '(', '!', '-', identifier, stringconst",
			"expecting: 'tuple', 'true', 'false', pos intconst, neg intconst, '(', identifier, stringconst",
			"expecting: '}', '=', ';', '<', '>', '(', ')', ']', ',', '\+', '\-', '<<', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||', '.'",
			"expecting: '}', ';', ')', ']', ',', '||'",
			"expecting: '}', ';', ')', ']', ',', '&&', '||'",
			"expecting: '}', ';', '<', '>', ')', ']', ',', '==', '!=', '<=', '>=', '-', '+', '&&', '||'",
			"expecting: '}', ';', '<', '>', ')', ']', ',', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||'",
			"expecting: '}', '=', ';', '<', '>', ')', ']', ',', '\+', '\-', '<<', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||'",
			"expecting: pos intconst, neg intconst, 'type', 'name', '=', '>', identifier, stringconst",
			"expecting: pos intconst, neg intconst, 'type', 'name', '>', identifier, stringconst",
			"expecting: 'receive', ';'",
			"expecting: '}', identifier",
			"expecting: 'tuple', 'true', 'false', pos intconst, neg intconst, '(', ')', '!', '-', identifier, stringconst",
			"expecting: '(', identifier",
			"expecting: 'text', 'radio', stringconst",
			"expecting: pos intconst, neg intconst, identifier, stringconst",
			"expecting: meta, '<', '</', '<[', whatever",
			"expecting: '['",
			"expecting: '}', ','",
			"expecting: '}', ';', ')', ']', ',', '-', '+', '&&', '||'",
			"expecting: 'select', identifier",
			"expecting: 'show', 'exit', 'return', 'if', 'while', 'tuple', 'true', 'false', pos intconst, neg intconst, '{', ';', '(', '!', '-', identifier, stringconst",
			"expecting: ']', ','",
			"expecting: '=', '.'",
			"expecting: 'show', 'exit', 'return', 'if', 'else', 'while', 'tuple', 'true', 'false', pos intconst, neg intconst, '{', '}', ';', '(', '!', '-', identifier, stringconst",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 6, 9, 10, 10, 7, 9, 9, 11, 1, 12, 6, 13, 14, 2, 10, 7, 10, 9, 9, 8, 10, 9, 6, 9, 10, 15, 16, 17, 18, 8, 6, 2, 10, 9, 10, 2, 10, 12, 2, 19, 7, 16, 6, 16, 1, 1, 6, 20, 20, 21, 2, 10, 2, 2, 19, 22, 23, 6, 6, 19, 19, 19, 22, 7, 16, 24, 10, 9, 20, 1, 25, 2, 5, 26, 26, 27, 28, 29, 22, 19, 16, 30, 30, 31, 12, 12, 32, 33, 33, 34, 34, 35, 36, 37, 38, 38, 39, 33, 33, 6, 36, 36, 22, 40, 41, 41, 42, 43, 43, 33, 33, 33, 44, 24, 36, 9, 20, 11, 11, 45, 45, 46, 46, 45, 45, 46, 46, 19, 27, 27, 19, 19, 5, 6, 47, 47, 22, 1, 36, 22, 37, 37, 48, 17, 33, 33, 33, 49, 6, 21, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 50, 50, 37, 37, 35, 36, 35, 36, 51, 52, 52, 19, 46, 53, 19, 27, 54, 54, 36, 22, 36, 36, 17, 17, 33, 11, 55, 55, 33, 33, 20, 20, 44, 41, 41, 56, 56, 56, 56, 56, 56, 43, 43, 43, 43, 43, 6, 33, 6, 33, 43, 40, 35, 46, 46, 46, 46, 46, 46, 57, 53, 6, 6, 36, 58, 58, 37, 33, 6, 33, 37, 20, 20, 28, 57, 11, 59, 59, 60, 59, 59, 11, 30, 30, 31, 12, 12, 61, 36, 62, 61, 22, 36, 55, 55, 20, 33, 33, 19, 28, 37, 47, 6, 22, 6, 6, 47, 22, 61, 22, 37, 37, 58, 61, 19, 59, 59, 59, 59, 61, 22, 61, 61, 17, 17, 36, 61, 58, 58, 62, 62, 58, 62, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
