/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.analysis;

import wig.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAService(AService node);
    void caseAHtml(AHtml node);
    void caseATagStartHtmlbody(ATagStartHtmlbody node);
    void caseATagEndHtmlbody(ATagEndHtmlbody node);
    void caseAHoleHtmlbody(AHoleHtmlbody node);
    void caseAWhateverHtmlbody(AWhateverHtmlbody node);
    void caseAMetaHtmlbody(AMetaHtmlbody node);
    void caseAInputHtmlbody(AInputHtmlbody node);
    void caseASelectHtmlbody(ASelectHtmlbody node);
    void caseANameInputattr(ANameInputattr node);
    void caseATypeInputattr(ATypeInputattr node);
    void caseAAttributeInputattr(AAttributeInputattr node);
    void caseATexttypeInputtype(ATexttypeInputtype node);
    void caseARadiotypeInputtype(ARadiotypeInputtype node);
    void caseAStrtypeInputtype(AStrtypeInputtype node);
    void caseAAttrAttribute(AAttrAttribute node);
    void caseAAssignAttribute(AAssignAttribute node);
    void caseAIdAttr(AIdAttr node);
    void caseAStrAttr(AStrAttr node);
    void caseAIconstAttr(AIconstAttr node);
    void caseANegintIntconst(ANegintIntconst node);
    void caseAPosintIntconst(APosintIntconst node);
    void caseASchema(ASchema node);
    void caseAField(AField node);
    void caseAVariable(AVariable node);
    void caseAIdentifiers(AIdentifiers node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseAStringType(AStringType node);
    void caseAVoidType(AVoidType node);
    void caseASimpleType(ASimpleType node);
    void caseATupleType(ATupleType node);
    void caseAFunction(AFunction node);
    void caseAArguments(AArguments node);
    void caseAArgument(AArgument node);
    void caseASession(ASession node);
    void caseAEmptyStm(AEmptyStm node);
    void caseAShowStm(AShowStm node);
    void caseAExitStm(AExitStm node);
    void caseAReturnStm(AReturnStm node);
    void caseAReturnexpStm(AReturnexpStm node);
    void caseAIfStm(AIfStm node);
    void caseAIfelseStm(AIfelseStm node);
    void caseAWhileStm(AWhileStm node);
    void caseACompStm(ACompStm node);
    void caseAExpStm(AExpStm node);
    void caseAIdDocument(AIdDocument node);
    void caseAPlugDocument(APlugDocument node);
    void caseAReceive(AReceive node);
    void caseACompoundstm(ACompoundstm node);
    void caseAPlugs(APlugs node);
    void caseAPlug(APlug node);
    void caseAInputs(AInputs node);
    void caseAInput(AInput node);
    void caseAAssignExp(AAssignExp node);
    void caseAOrExp(AOrExp node);
    void caseAAndExp(AAndExp node);
    void caseAEqExp(AEqExp node);
    void caseANeqExp(ANeqExp node);
    void caseALtExp(ALtExp node);
    void caseAGtExp(AGtExp node);
    void caseALteqExp(ALteqExp node);
    void caseAGteqExp(AGteqExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseAModExp(AModExp node);
    void caseAJoinExp(AJoinExp node);
    void caseAKeepExp(AKeepExp node);
    void caseARemoveExp(ARemoveExp node);
    void caseAKeepManyExp(AKeepManyExp node);
    void caseARemoveManyExp(ARemoveManyExp node);
    void caseANotExp(ANotExp node);
    void caseANegExp(ANegExp node);
    void caseADefaultExp(ADefaultExp node);
    void caseALvalueExp(ALvalueExp node);
    void caseACallExp(ACallExp node);
    void caseAIntExp(AIntExp node);
    void caseATrueExp(ATrueExp node);
    void caseAFalseExp(AFalseExp node);
    void caseAStringExp(AStringExp node);
    void caseATupleExp(ATupleExp node);
    void caseAParenExp(AParenExp node);
    void caseAExps(AExps node);
    void caseASimpleLvalue(ASimpleLvalue node);
    void caseAQualifiedLvalue(AQualifiedLvalue node);
    void caseAFieldvalues(AFieldvalues node);
    void caseAFieldvalue(AFieldvalue node);

    void caseTService(TService node);
    void caseTConst(TConst node);
    void caseTHtml(THtml node);
    void caseTHtmlTagStart(THtmlTagStart node);
    void caseTSchema(TSchema node);
    void caseTSession(TSession node);
    void caseTShow(TShow node);
    void caseTExit(TExit node);
    void caseTReturn(TReturn node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTPlug(TPlug node);
    void caseTReceive(TReceive node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTString(TString node);
    void caseTVoid(TVoid node);
    void caseTTuple(TTuple node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTMeta(TMeta node);
    void caseTHtmlTagEnd(THtmlTagEnd node);
    void caseTInput(TInput node);
    void caseTPosIntconst(TPosIntconst node);
    void caseTNegIntconst(TNegIntconst node);
    void caseTSelect(TSelect node);
    void caseTType(TType node);
    void caseTName(TName node);
    void caseTText(TText node);
    void caseTRadio(TRadio node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTAssign(TAssign node);
    void caseTSemicolon(TSemicolon node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLtSlash(TLtSlash node);
    void caseTLtBracket(TLtBracket node);
    void caseTGtBracket(TGtBracket node);
    void caseTComment(TComment node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTComma(TComma node);
    void caseTKeep(TKeep node);
    void caseTRemove(TRemove node);
    void caseTJoin(TJoin node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNot(TNot node);
    void caseTMinus(TMinus node);
    void caseTPlus(TPlus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTDot(TDot node);
    void caseTEol(TEol node);
    void caseTBlank(TBlank node);
    void caseTIdentifier(TIdentifier node);
    void caseTStringconst(TStringconst node);
    void caseTWhatever(TWhatever node);
    void caseEOF(EOF node);
}
