/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

@SuppressWarnings("nls")
public final class AInputHtmlbody extends PHtmlbody
{
    private TInput _input_;
    private final LinkedList<PInputattr> _inputattr_ = new LinkedList<PInputattr>();

    public AInputHtmlbody()
    {
        // Constructor
    }

    public AInputHtmlbody(
        @SuppressWarnings("hiding") TInput _input_,
        @SuppressWarnings("hiding") List<?> _inputattr_)
    {
        // Constructor
        setInput(_input_);

        setInputattr(_inputattr_);

    }

    @Override
    public Object clone()
    {
        return new AInputHtmlbody(
            cloneNode(this._input_),
            cloneList(this._inputattr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInputHtmlbody(this);
    }

    public TInput getInput()
    {
        return this._input_;
    }

    public void setInput(TInput node)
    {
        if(this._input_ != null)
        {
            this._input_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._input_ = node;
    }

    public LinkedList<PInputattr> getInputattr()
    {
        return this._inputattr_;
    }

    public void setInputattr(List<?> list)
    {
        for(PInputattr e : this._inputattr_)
        {
            e.parent(null);
        }
        this._inputattr_.clear();

        for(Object obj_e : list)
        {
            PInputattr e = (PInputattr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._inputattr_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._input_)
            + toString(this._inputattr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._input_ == child)
        {
            this._input_ = null;
            return;
        }

        if(this._inputattr_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._input_ == oldChild)
        {
            setInput((TInput) newChild);
            return;
        }

        for(ListIterator<PInputattr> i = this._inputattr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInputattr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
