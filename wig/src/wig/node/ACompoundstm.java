/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

@SuppressWarnings("nls")
public final class ACompoundstm extends PCompoundstm
{
    private final LinkedList<PVariable> _variable_ = new LinkedList<PVariable>();
    private final LinkedList<PStm> _stm_ = new LinkedList<PStm>();

    public ACompoundstm()
    {
        // Constructor
    }

    public ACompoundstm(
        @SuppressWarnings("hiding") List<?> _variable_,
        @SuppressWarnings("hiding") List<?> _stm_)
    {
        // Constructor
        setVariable(_variable_);

        setStm(_stm_);

    }

    @Override
    public Object clone()
    {
        return new ACompoundstm(
            cloneList(this._variable_),
            cloneList(this._stm_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompoundstm(this);
    }

    public LinkedList<PVariable> getVariable()
    {
        return this._variable_;
    }

    public void setVariable(List<?> list)
    {
        for(PVariable e : this._variable_)
        {
            e.parent(null);
        }
        this._variable_.clear();

        for(Object obj_e : list)
        {
            PVariable e = (PVariable) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variable_.add(e);
        }
    }

    public LinkedList<PStm> getStm()
    {
        return this._stm_;
    }

    public void setStm(List<?> list)
    {
        for(PStm e : this._stm_)
        {
            e.parent(null);
        }
        this._stm_.clear();

        for(Object obj_e : list)
        {
            PStm e = (PStm) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stm_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variable_)
            + toString(this._stm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variable_.remove(child))
        {
            return;
        }

        if(this._stm_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PVariable> i = this._variable_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariable) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStm> i = this._stm_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
